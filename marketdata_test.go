package sfoxapi

import (
	"fmt"
	"testing"
	"time"
)

func TestOrderbookParsing(t *testing.T) {
	testData := `{"bids":[[338.74,3.32263586,"market1"],[338.73,0.20840638,"market1"],[338.72,5.443765,"gemini"],[338.72,4,"market1"],[338.71,30,"gemini"],[338.71,5,"market1"],[338.7,3.580948,"kraken"],[338.69,22.1367682,"kraken"],[338.69,7.37140992,"market1"],[338.69,27.46486724,"bitstamp"],[338.66,58.6,"gemini"],[338.66,21.86935672,"market1"],[338.65,22.13923465,"kraken"],[338.65,58.6,"market1"],[338.64,5,"b2c2"],[338.63,16.97186827,"bitstamp"],[338.62,14.5887,"market1"],[338.62,14.758,"bitstamp"],[338.61,50,"b2c2"],[338.59,22.68,"market1"],[338.58,16,"ox"],[338.58,5.90702,"market1"],[338.57,1.71213797,"kraken"],[338.57,2.92505401,"bitstamp"],[338.56,6.61086611,"kraken"],[338.56,10,"market1"],[338.55,79.51416536,"kraken"],[338.55,36.63444659,"market1"],[338.54,5.90772,"market1"],[338.53,32.5922654,"kraken"],[338.53,73.81213883546205,"otc11"],[338.53,5,"market1"],[338.52,6.14784127,"kraken"],[338.52,43.7661,"market1"],[338.52,24.54,"bitstamp"],[338.51,43.77665744,"market1"],[338.51,5,"bitstamp"],[338.5,7.66279954,"kraken"],[338.5,0.25080286,"market1"],[338.5,200,"b2c2"],[338.49,2,"market1"],[338.49,35.42959405,"bitstamp"],[338.48,19.47,"market1"],[338.47,29.49733312,"kraken"],[338.47,5.90772,"market1"],[338.47,16.93622306,"bitstamp"],[338.46,37.52341195,"kraken"],[338.45,44.088,"market1"],[338.45,17.22658329,"bitstamp"],[338.44,0.0117695,"market1"],[338.44,14.20554786,"bitstamp"],[338.43,13.715,"gemini"],[338.43,58.6,"bitstamp"],[338.42,5.90772,"market1"],[338.42,8.83696433,"bitstamp"],[338.41,20.85588641,"market1"],[338.4,18.54651271,"market1"],[338.4,41.323,"bitstamp"],[338.39,8.50505563,"market1"],[338.39,17.6987,"bitstamp"],[338.39,500,"b2c2"],[338.38,11.6,"gemini"],[338.38,5.90545368,"bitstamp"],[338.37,5.90772,"market1"],[338.37,16.6,"bitstamp"],[338.36,62.861,"bitstamp"],[338.35,2.3268698,"kraken"],[338.34,7.02,"kraken"],[338.34,0.03,"market1"],[338.33,195.92,"gemini"],[338.33,5.90545368,"bitstamp"],[338.32,29.51368987,"kraken"],[338.32,18.904,"gemini"],[338.31,5,"market1"],[338.3,38.73361627,"kraken"],[338.3,4.93,"gemini"],[338.3,20.84261476,"market1"],[338.3,42.808,"bitstamp"],[338.29,0.147802,"gemini"],[338.28,77,"market1"],[338.28,4.95,"bitstamp"],[338.27,125.4069,"market1"],[338.27,5.71087195,"bitstamp"],[338.25,58.571318,"gemini"],[338.24,1000,"b2c2"],[338.23,150.745,"bitstamp"],[338.2,16.016,"kraken"],[338.2,44.093,"market1"],[338.2,5.05,"bitstamp"],[338.19,15.040474,"market1"],[338.13,14.91,"bitstamp"],[338.12,16.3221132,"market1"],[338.12,5.05,"bitstamp"],[338.09,20.97,"kraken"],[338.07,14.57,"gemini"],[338.06,104.1,"gemini"],[338.06,0.66567676,"market1"],[338.06,9.99623414,"bitstamp"],[338.05,16.88674693,"market1"],[338.04,117.2,"bitstamp"]],"asks":[[338.72,42.36951871,"kraken"],[338.74,22.13813805,"kraken"],[338.75,5.52,"kraken"],[338.76,4.42697759,"market1"],[338.76,22.1367682,"kraken"],[338.77,30,"market1"],[338.78,24.1367682,"kraken"],[338.78,16,"ox"],[338.8,28.89293532,"market1"],[338.82,1.1206,"market1"],[338.83,60,"gemini"],[338.83,36.31989337,"kraken"],[338.84,32.462,"kraken"],[338.86,50,"b2c2"],[338.87,73.81213883546205,"otc11"],[338.88,22.1218,"gemini"],[338.89,29.477,"market1"],[338.89,30,"kraken"],[338.9,200,"b2c2"],[338.9,30,"bitstamp"],[338.9,30,"market1"],[338.9,3.043765,"gemini"],[338.91,14.5879,"market1"],[338.91,30,"gemini"],[338.91,40.02822258,"kraken"],[338.92,24.81710874,"market1"],[338.92,29.5123163,"kraken"],[338.93,3.91131022,"market1"],[338.94,2,"kraken"],[338.95,35.25,"kraken"],[338.97,20.76,"bitstamp"],[338.97,12.4,"market1"],[338.97,47.06521785,"kraken"],[338.98,5.05,"kraken"],[339,2.4,"gemini"],[339.01,22.12254989,"market1"],[339.02,32.91369115,"bitstamp"],[339.02,44.222,"market1"],[339.03,30.89918,"market1"],[339.05,22.139,"bitstamp"],[339.05,43.7735,"market1"],[339.05,14.67275962,"kraken"],[339.06,29.519,"bitstamp"],[339.06,61.6,"market1"],[339.08,28.18744113,"bitstamp"],[339.08,5.89831,"market1"],[339.08,0.38538218,"kraken"],[339.09,2.4,"bitstamp"],[339.09,58.6,"gemini"],[339.09,29.51721365,"kraken"],[339.1,21.04055386,"market1"],[339.11,5.89779,"market1"],[339.12,5,"bitstamp"],[339.13,5.89744345,"bitstamp"],[339.13,43.7635,"market1"],[339.13,3.07365469,"kraken"],[339.14,29.51897953,"kraken"],[339.15,5,"bitstamp"],[339.16,29.39451217,"market1"],[339.17,500,"b2c2"],[339.17,44.273,"bitstamp"],[339.17,8.57298894,"market1"],[339.18,58.6,"bitstamp"],[339.18,5.89657,"market1"],[339.2,5.534,"bitstamp"],[339.2,15,"market1"],[339.21,8.90598669,"bitstamp"],[339.21,2.578522,"gemini"],[339.23,26.28475935,"bitstamp"],[339.23,21.18475935,"market1"],[339.23,2.95207309,"kraken"],[339.24,69.5089,"market1"],[339.24,16.36738379,"kraken"],[339.25,12.27299506,"bitstamp"],[339.26,11.0427,"bitstamp"],[339.26,20,"kraken"],[339.28,50.17383612,"bitstamp"],[339.28,20,"gemini"],[339.28,7.02,"kraken"],[339.29,4.93,"bitstamp"],[339.3,12.0887234,"kraken"],[339.31,4.9,"bitstamp"],[339.31,1.9463635,"kraken"],[339.32,2.36023,"market1"],[339.32,140.0528,"kraken"],[339.33,4.93,"gemini"],[339.33,1.62,"kraken"],[339.35,43.7635,"market1"],[339.37,94.45827282,"bitstamp"],[339.38,1000,"b2c2"],[339.38,2.08608,"gemini"],[339.4,20.70065218,"market1"],[339.41,118.73,"market1"],[339.41,117.2,"gemini"],[339.45,5,"market1"],[339.46,11.22823655,"bitstamp"],[339.47,12.678,"gemini"],[339.48,5,"bitstamp"],[339.48,10.82,"kraken"],[339.49,117.2,"bitstamp"]],"market_making":{"bids":[[338.53,73.81213883546205,"otc11"],[338.58,16,"ox"],[338.69,27.46486724,"bitstamp"],[338.7,3.580948,"kraken"],[338.72,5.443765,"gemini"],[338.74,3.32263586,"market1"]],"asks":[[339.75,0.6,"bitfinex"],[338.9,30,"bitstamp"],[338.87,73.81213883546205,"otc11"],[338.83,60,"gemini"],[338.78,16,"ox"],[338.76,4.42697759,"market1"],[338.72,42.36951871,"kraken"]]},"pair":"ethusd","lastupdated":1600876122672,"lastpublished":1600876122680}`

	jsonBytes := []byte(testData)

	// Parse JSON string into Go object
	ob, err := NewSFOXOrderbookFromJSON(jsonBytes)
	if err != nil {
		fmt.Println(err)
		t.Fail()
		return
	}

	fmt.Printf("%+v", ob)
}

func TestGetOrderbookFromSfox(t *testing.T) {
	sfoxApi := NewSFOXAPI("fakeAPIKey")

	for {
		ob, err := sfoxApi.GetOrderbook("btcusd")
		if err != nil {
			fmt.Println(err)
			t.Fail()
			return
		}
		mid, err := ob.MidPrice()
		if err != nil {
			fmt.Println(err)
			t.Fail()
			return
		}
		fmt.Println("MidPrice: ", mid)
		time.Sleep(time.Second)
	}

}
